DOMPurify
iti <script src="https://cdnjs.cloudflare.com/ajax/libs/dompurify/3.0.3/purify.min.js"></script> atao ao @page
afka atao test @iti 
// Une chaîne HTML avec un script dangereux
const dirtyHTML = `
  <div>
    <h1>Hello, World!</h1>
    <script>alert('Danger!');</script>
  </div>
`;

<script type="text/javascript" src="src/purify.js"></script>

// Désinfecter avec DOMPurify
const cleanHTML = DOMPurify.sanitize(dirtyHTML);

// Afficher le HTML désinfecté
console.log(cleanHTML);

<div id="output"></div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/dompurify/3.0.3/purify.min.js"></script>
<script>
  const dirtyHTML = `
    <div>
      <h1>Bienvenue !</h1>
      <script>alert('Malveillant');</script>
    </div>
  `;

  // Désinfecter le HTML
  const cleanHTML = DOMPurify.sanitize(dirtyHTML);

  // Insérer dans le DOM
  document.getElementById('output').innerHTML = cleanHTML;
</script>


na mampiasa
npm install dompurify
import DOMPurify from 'dompurify';

const config = { ALLOWED_TAGS: ['b', 'i', 'em', 'strong', 'a'] }; // configuration DOMPurify
const config = { ALLOWED_ATTR: ['href', 'target'] };

const cleanHTML = DOMPurify.sanitize('<b>Hello</b> <script>Malicious</script>', config);
console.log(cleanHTML); // "<b>Hello</b>"

<form id="commentForm">
    <textarea id="userInput" placeholder="Votre commentaire"></textarea>
    <button type="submit">Soumettre</button>
  </form>
  <div id="comments"></div>
  
  <script src="https://cdnjs.cloudflare.com/ajax/libs/dompurify/3.0.3/purify.min.js"></script>
  <script>
    document.getElementById('commentForm').addEventListener('submit', (e) => {
      e.preventDefault();
      const userInput = document.getElementById('userInput').value;
  
      // Nettoyer l'entrée utilisateur
      const cleanComment = DOMPurify.sanitize(userInput);
  
      // Ajouter au DOM
      const commentsDiv = document.getElementById('comments');
      const comment = document.createElement('div');
      comment.innerHTML = cleanComment;
      commentsDiv.appendChild(comment);
  
      // Réinitialiser le formulaire
      document.getElementById('userInput').value = '';
    });
  </script>

npm install jsdom
DOMPurify dépend d'un environnement DOM pour fonctionner (comme celui fourni par les navigateurs). Dans Node.js, le DOM n'est pas disponible nativement.

jsdom simule un environnement DOM côté serveur, permettant ainsi à DOMPurify de désinfecter le contenu HTML même en dehors d'un navigateur.


const { JSDOM } = require('jsdom'); // Importer jsdom
const createDOMPurify = require('dompurify'); // Importer DOMPurify

// Créer un environnement DOM côté serveur
const window = new JSDOM('').window;

// Initialiser DOMPurify avec l'environnement DOM de jsdom
const DOMPurify = createDOMPurify(window);

// Désinfecter une chaîne HTML
const dirtyHTML = `
  <div>
    <h1>Hello, World!</h1>
    <script>alert('Malicious!');</script>
  </div>
`;

const cleanHTML = DOMPurify.sanitize(dirtyHTML);

console.log(cleanHTML);
// Résultat : "<div><h1>Hello, World!</h1></div>"



  const cors = require('cors');
  app.use(cors({
    origin: 'https://domain.com',
    methods: ['GET', 'POST'],
    allowedHeaders: ['Content-Type', 'Authorization'],
  }));
  
  app.options(route, cors());

  bcrypt pour la sécurisation password

atao redirection fon ra vao tsi https mb iarovana ni app
app.use((req, res, next)=>{
    if(req.)
})




document.addEventListener('DOMContentLoaded', async function(){
  console.log('Page List chargée avec succès !')

  const todosContainer = document.querySelector('#todos')

  // Fonction pour charger les tâches depuis l'API
  const loadTodos = async function(todos) {
  
    todosContainer.innerHTML = '' // Réinitialiser la liste

    if (todos) {
      todos.forEach(todo => {
        const item = document.createElement('li')
        item.className = `items ${todo.checked ? 'checked' : ''}`
        item.dataset.id = todo.id // Stocker l'ID de la tâche
        item.textContent = todo.text

        if (!todo.checked) {
          const span = document.createElement('span')
          const btnModify = document.createElement('button')
          const btnDeleted = document.createElement('button')

          btnModify.textContent = 'Modify'
          btnDeleted.textContent = 'Delete'

          btnModify.className = 'btn modify'
          btnDeleted.className = 'btn deleted'

          span.appendChild(btnModify)
          span.appendChild(btnDeleted)
          item.appendChild(span)

          // Gestion des événements des boutons
          btnModify.addEventListener('click', () => modifyTodo(todo.id))
          btnDeleted.addEventListener('click', () => deleteTodo(todo.id))
        }
        todosContainer.appendChild(item)
      })
    }else{
        const item = document.createElement('li');
        item.className = `items`;
        item.textContent = 'Aucune donnée trouvée.';
        todosContainer.appendChild(item);
    }
  }

  // Fonction pour modifier une tâche
  const modifyTodo = async function(id){
    const newText = prompt('Modifier la tâche :')
    if (newText) {
      await fetch(`/api/todos/${id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ text: newText })
      })
      loadTodos() // Recharger la liste
    }
  }

  // Fonction pour supprimer une tâche
  const deleteTodo = async function(id){
    if (confirm('Voulez-vous vraiment supprimer cette tâche ?')) {
      await fetch(`/api/todos/${id}`, { method: 'DELETE' })
      loadTodos() // Recharger la liste
    }
  }

  // Charger les tâches initiales
  loadTodos()
})


<h1>List Todo</h1>

<ul id="todos">
    <li class="items checked">Hit the gym</li>
    <li class="checked items">Pay bills</li>
    <li class="items">Meet George</li>
    <li class="items">Buy eggs</li>
    <li class="items">Read a book</li>
    <li class="items">Organize office</li>
</ul>
<script src="https://cdnjs.cloudflare.com/ajax/libs/dompurify/3.0.3/purify.min.js"></script>
</div >


const listItems  = document.querySelectorAll('#todos > li');

  listItems.forEach(item => {
    console.info(item.classList.value);
    if (!item.classList.contains('checked')) {
      var span = document.createElement("span");
      var btnModify = document.createElement("button");
      var btnDeleted = document.createElement("button");
      var txtModify = document.createTextNode("Modify");
      var txtDeleted = document.createTextNode("Delete");
      btnModify.className = "btn modify";
      btnModify.appendChild(txtModify);
      span.appendChild(btnModify);
      btnDeleted.className = "btn deleted";
      btnDeleted.appendChild(txtDeleted);
      span.appendChild(btnDeleted);
      item.appendChild(span);
    }
  }
);


<% if (todos.length > 0) { %>
  <ul id="todos">
      <% todos.forEach(todo => { %>
          <li class="items <%= todo.checked ? 'checked' : '' %>">
              <%= todo.text %>
          </li>
          <% }) %>
  </ul>
  <% } else { %>
      <p>
          Aucun ToDo trouvé. Ajoutez-en un pour commencer !
          <a href="/add">Add</a>
      </p>
      <% } %>


       // if (confirm('Voulez-vous vraiment supprimer cette tâche ?')) {
    //   let url = ``;
    //   window.location.href = url; // Redirige
    //   // await fetch(`/api/todos/${id}`, { method: 'DELETE' })
    // }
    // const newText = prompt('Modifier la tâche :')
    // if (newText) {
    //   await fetch(`/api/todos/${id}`, {
    //     method: 'PUT',
    //     headers: { 'Content-Type': 'application/json' },
    //     body: JSON.stringify({ text: newText })
    //   })
    //   loadTodos() // Recharger la liste
    // }


    document.addEventListener('DOMContentLoaded', () => {
      console.log('Page List chargée avec succès !');
    
      const todosContainer = document.querySelector('#todos')
    
      const modalModify = document.getElementById('modalModify');
      const modalTitleModify = document.getElementById('modal-title-modify');
      const todoTextInput = document.getElementById('todo-text');
      const todoCheckedInput = document.getElementById('todo-checked');
      const modalSaveModify = document.getElementById('modal-save-modify');
      const modalCancel = document.getElementById('modal-cancel');
      const closeModal = document.querySelector('.close');
    
      let currentTodoId = null;
    
      const openModifyModal = (todo) => {
        modalModify.style.display = 'block';
        modalTitleModify.textContent = 'Modify ToDo';
        currentTodoId = todo._id;
        todoTextInput.value = todo.text;
        todoCheckedInput.checked = todo.checked;
      };
    
      // Fermer la modale
      const closeModalAction = () => {
        modalModify.style.display = 'none';
        currentTodoId = null; // Réinitialiser l'ID
      };
    
      closeModal.addEventListener('click', closeModalAction);
      modalCancel.addEventListener('click', closeModalAction);
    
      modalSaveModify.addEventListener('click', async (e) => {
        e.preventDefault();
    
        const updatedTodo = {
          text: todoTextInput.value,
          checked: todoCheckedInput.checked,
        };
    
        try {
          // Appel API pour modifier le ToDo
          const response = await fetch(`/api/todos/${currentTodoId}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(updatedTodo),
          });
    
          if (response.ok) {
            alert('ToDo modifié avec succès !');
            location.reload(); // Recharger la page
          } else {
            const error = await response.json();
            alert(`Erreur : ${error.message}`);
          }
        } catch (err) {
          alert('Erreur lors de la modification du ToDo.');
        }
    
        closeModalAction();
      });
    
      window.addEventListener('click', (event) => {
        if (event.target === modalModify) {
          closeModalAction();
        }
      });
    
      const loadTodos = async function (todos) {
        console.log(todos);
    
        todosContainer.innerHTML = ''
        if (todos) {
          todos.forEach(todo => {
            const item = document.createElement('li')
            item.className = `items ${todo.checked ? 'checked' : ''}`
            item.dataset.id = todo.id // Stocker l'ID de la tâche
            item.textContent = todo.text
    
            if (!todo.checked) {
              const span = document.createElement('span')
              const btnModify = document.createElement('button')
              const btnDeleted = document.createElement('button')
              
              btnModify.textContent = 'Modify'
              btnDeleted.textContent = 'Delete'
    
              btnModify.className = 'btn modify'
              btnDeleted.className = 'btn deleted'
    
              span.appendChild(btnModify)
              span.appendChild(btnDeleted)
              item.appendChild(span)
    
              btnModify.addEventListener('click', () => modifyTodo(todo))
              btnDeleted.addEventListener('click', () => deleteTodo(todo.id))
            }
            todosContainer.appendChild(item)
          })
        } else {
          const item = document.createElement('li');
          item.className = `items`;
          item.textContent = 'Aucune donnée trouvée.';
          todosContainer.appendChild(item);
        }
      }
    
    
      const modifyTodo = async function (todo) {
        openModifyModal(todo);
      }
    
      const deleteTodo = async function (id) {
        if (confirm('Voulez-vous vraiment supprimer cette tâche ?')) {
          let url = `/api/remove/${id}`
          window.location.href = url; // Redirige
          // await fetch(`/api/todos/${id}`, { method: 'DELETE' })
        }
      }
    
      // Charger les tâches initiales
      loadTodos(todos)
    
    });
    
    
    function appendChildWithContent(parentElement, elementToAppend, textContent, listClass = []) {
      let element = document.createElement(elementToAppend);
      element.textContent = textContent;
      if(listClass.length > 0){
        listClass.forEach((item)=>{
          element.classList.add = ' ' + item;
        });
      }
      parentElement.appendChild(elementToAppend);
    }


    <body>
    <div class="jumbotron">
        <div class="container">
            <h1 class="display-4">Hotels</h1>
        </div>
    </div>
    <div class="container">
        <%if (hotels.length > 0) {%>
        <div class="row">
            <%for (let hotel of hotels) {%>
            <div class="col-sm-4">
                <div class="card mt-4" style="width: 18rem;">
                    <div class="card-body">
                        <h5 class="card-title mt-2"><%=hotel.title%></h5>
                        <p class="card-text"><%=hotel.description%></p>
                    </div>
                </div>
            </div>
            <%}%>
            <div class="container mt-4">
                <nav aria-label="Page navigation example">
                    <ul class="pagination justify-content-center">
                        <% if (hasPreviousPage) { %>
                        <li class="page-item">
                            <a class="page-link" href="?page=1">First</a>
                        </li>
                        <li class="page-item">
                            <a class="page-link" href="?page=<%= previousPage %>"><%= previousPage %></a>
                        </li>
                        <% } %>
                        <li class="page-item active">
                            <a class="page-link" href="?page=<%= currentPage %>"><%= currentPage %></a>
                        </li>
                        <% if (hasNextPage) { %>
                        <li class="page-item">
                            <a class="page-link" href="?page=<%= nextPage %>"><%= nextPage %></a>
                        </li>
                        <li class="page-item">
                            <a class="page-link" href="?page=<%= lastPage %>">Last</a>
                        </li>
                        <% } %>
                    </ul>
                </nav>
            </div>
        </div>
        <%} else {%>
        <div class="text-center">
            <h5>No products found.</h5>
            <div class="mt-4">
                <a href="/" class="btn btn-outline-primary">Go Home</a>
            </div>
        </div>
        <%}%>
    </div>
</body>

const ITEMS_PER_PAGE = 4;

exports.getIndex = (req, res, next) => {

    // start constants
    const page = +req.query.page || 1; // pagination
    let totalItems; // pagination
    // end constants

    Hotel.find()
    .countDocuments()
    .then(numberOfProducts => {
        totalItems = numberOfProducts;
        return Hotel.find()
                    .skip((page-1) * ITEMS_PER_PAGE)
                    .limit(ITEMS_PER_PAGE);
    }).then(hotels => {
        res.render('pages/hotel', {
            hotels: hotels,
            currentPage: page,
            hasNextPage: (ITEMS_PER_PAGE * page) < totalItems,
            hasPreviousPage: page > 1,
            nextPage: page + 1,
            previousPage: page - 1,
            lastPage: Math.ceil(totalItems / ITEMS_PER_PAGE)
        });
    }).catch(err => {
        console.log(err);
    });
}


<div id="modalModify" class="modalModify" style="display: none;">
        <div class="modal-content-modify table-responsive-sm">
            <span id="close-modify">&times;</span>
            <h2 id="modal-title-modify">Modifier une tache</h2>
            <table class="table table-sm">
                <thead class="thead-dark">
                    <tr>
                        <th>Tâche</th>
                        <th>Username</th>
                        <th>Terminée</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td> <input type="text" id="todo-text-modify" name="text" required></td>
                        <td> <input type="text" id="todo-text-username" name="text" required disabled></td>
                        <td> <input type="checkbox" id="todo-checked-modify" name="checked"></td>
                    </tr>
                    <tr>
                        <td colspan="2"> <button type="button" id="modal-save-modify" class="btn btn-info">Modifier</button> </td>
                        <td> <button type="button" id="modal-cancel-modify" class="btn btn-secondary">Annuler</button>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>


    <div class="modalModify" id="modalModify" style="display: none;">
        <div class="modal-dialog">
            <div class="modal-content">

                <div class="modal-header">
                    <h4 class="modal-title">Modifier une tache</h4>
                </div>

                <div class="modal-body">
                    <ul class="list-group">
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <span>Tâche</span>
                            <input type="text" id="todo-text-modify" name="text" required>
                        </li>
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <span>Username</span>
                            <input type="text" id="todo-text-username" name="text" required disabled>
                        </li>
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <span>Terminée</span>
                            <input type="checkbox" id="todo-checked-modify" name="checked">
                        </li>
                    </ul>
                </div>
                <div class="modal-footer d-flex justify-content-between align-items-center">
                    <button type="button" id="modal-save-modify" class="btn btn-info">Modifier</button>
                    <button type="button" id="modal-cancel-modify" class="btn btn-secondary">Annuler</button>
                </div>

            </div>
        </div>
    </div>

    <% if (todos.length > 0) { %>
                    <div class="table-responsive-sm">
                        <table class="table table-hover table-sm">
                            <thead>
                                <tr>
                                    <th>Tâches</th>
                                    <th>Date de fin</th>
                                    <th>Terminer</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% todos.forEach(todo => { %>
                                    <tr>
                                        <td>
                                            <%= todo.text %>
                                        </td>
                                        <td>
                                            <%= todo.dueDate ? new Date(todo.dueDate).toLocaleDateString() : 'Non définie' %>
                                        </td>
                                        <td class="text-right">
                                            <input type="checkbox" <%=todo.checked ? 'checked' : '' %> disabled class="form-check-input"/>
                                        </td>
                                    </tr>

                                    <% }) %>
                                        <% } else { %>
                                            <tr>
                                                <td>Aucune Tâche trouvée. Ajoutez-en un pour commencer !</td>
                                            </tr>
                                            <% } %>
                            </tbody>
                        </table>
                    </div>

<script>
document.addEventListener('DOMContentLoaded', function () {
  const searchForm = document.getElementById('searchForm');
  const searchInput = document.getElementById('searchInput');
  const searchResults = document.getElementById('searchResults');
  const pagination = document.getElementById('pagination');

  function loadSearchResults(query, page = 1) {
    fetch(`/api/search?q=${encodeURIComponent(query)}&page=${page}`)
      .then(res => res.json())
      .then(({ todos, totalPages, currentPage }) => {
        searchResults.innerHTML = '';
        pagination.innerHTML = '';

        if (todos.length === 0) {
          searchResults.innerHTML = '<li class="list-group-item text-muted">Aucun résultat trouvé</li>';
          return;
        }

        // Affichage des résultats
        todos.forEach(todo => {
          const li = document.createElement('li');
          li.className = 'list-group-item d-flex justify-content-between align-items-center';
          li.innerHTML = `
            <span>${todo.text} <small class="text-muted">(${todo.dueDate ? new Date(todo.dueDate).toLocaleDateString() : 'Sans date'})</small></span>
            <button class="btn btn-danger btn-sm" onclick="deleteTodo('${todo._id}')">🗑</button>
          `;
          searchResults.appendChild(li);
        });

        // Ajout de la pagination
        for (let i = 1; i <= totalPages; i++) {
          const li = document.createElement('li');
          li.className = `page-item ${i === currentPage ? 'active' : ''}`;
          li.innerHTML = `<a class="page-link" href="#">${i}</a>`;
          li.addEventListener('click', (e) => {
            e.preventDefault();
            loadSearchResults(query, i);
          });
          pagination.appendChild(li);
        }
      })
      .catch(err => console.error('Erreur de chargement des résultats:', err));
  }

  // Intercepter la soumission du formulaire
  searchForm.addEventListener('submit', function (e) {
    e.preventDefault();
    const query = searchInput.value.trim();
    if (query) {
      loadSearchResults(query);
    }
  });

  // Charger les résultats initiaux si une recherche est déjà dans l'URL
  const urlParams = new URLSearchParams(window.location.search);
  const initialQuery = urlParams.get('q');
  if (initialQuery) {
    searchInput.value = initialQuery;
    loadSearchResults(initialQuery);
  }
});
</script>



<%- include('../partials/header') %>

    <div class="container mt-4">
        <h2>Résultats de la recherche : "
            <%= searchQuery %>"</h2>

        <ul class="list-group" id="searchResults"></ul>

        <nav>
            <ul class="pagination mt-3" id="pagination"></ul>
        </nav>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const searchResults = document.getElementById('searchResults');
            const pagination = document.getElementById('pagination');

            function loadSearchResults(page = 1) {
                const urlParams = new URLSearchParams(window.location.search);
                console.log(window.location);
                const searchQuery = urlParams.get('q') || "";

                fetch(`/api/search?q=${searchQuery}&page=${page}`)
                    .then(res => res.json())
                    .then(({
                        todos,
                        totalPages,
                        currentPage
                    }) => {
                        searchResults.innerHTML = '';
                        pagination.innerHTML = '';

                        if (todos.length === 0) {
                            searchResults.innerHTML = '<li class="list-group-item text-muted">Aucun résultat trouvé</li>';
                            return;
                        }

                        todos.forEach(todo => {
                            const li = document.createElement('li');
                            li.className = 'list-group-item d-flex justify-content-between align-items-center';
                            li.innerHTML = `
                                <span>${todo.text} <small class="text-muted">(${todo.dueDate ? new Date(todo.dueDate).toLocaleDateString() : 'Non definie'})</small>
                                <small class="text-muted">(${todo.checked ? 'terminé' : 'en cours'})</small></span>
                            `;
                            searchResults.appendChild(li);
                        });

                        for (let i = 1; i <= totalPages; i++) {
                            const li = document.createElement('li');
                            li.className = `page-item ${i === currentPage ? 'active' : ''}`;
                            li.innerHTML = `<a class="page-link" href="#">${i}</a>`;
                            li.addEventListener('click', (e) => {
                                e.preventDefault();
                                loadSearchResults(i);
                            });
                            pagination.appendChild(li);
                        }
                    })
                    .catch(err => console.error('Erreur de chargement des résultats:', err));
            }

            loadSearchResults();
        });
    </script>


<ul class="pagination pagination-sm">
<% if (currentPage> 1) { %>
    <li class="page-item"> <a href="/list?page=<%= currentPage - 1 %>" class="page-link btn btn-secondary">Précédent</a></li>
    <% } %>
        <% 
            var nbPageView = currentPage + 1;
            var initialViewPage = currentPage;
            if(nbPageView > totalPages){
                nbPageView = totalPages
                initialViewPage = totalPages - 2;
            }
        %>
            <% for (let i=initialViewPage; i <=nbPageView; i++) { %>
                <li>
                    <a href="/list?page=<%= i %>" class="page-link btn <%= currentPage == i ? 'btn-primary' : 'btn-light' %>">
                        <%= i + '-' + initialViewPage  + '-' + currentPage %>
                    </a>
                </li>
                <% } %>

                    <% if (currentPage < totalPages) { %>
                        <li><a href="/list?page=<%= currentPage + 1 %>" class="page-link btn btn-secondary">Suivant</a></li>
                        <% } %>
</ul>